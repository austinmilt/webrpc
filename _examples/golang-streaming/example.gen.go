// golang-streaming v0.0.1 c8e50621bd583586fcc482465f205ff707929a0b
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/golang
// Do not edit by hand. Update your webrpc schema and re-generate.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/http/httputil"
	"net/url"
	"strings"
	"sync"
	"time"
)

// WebRPC description and code-gen version
func WebRPCVersion() string {
	return "v2"
}

// Schema version of your RIDL schema
func WebRPCSchemaVersion() string {
	return "v0.0.1"
}

// Schema hash generated from your RIDL schema
func WebRPCSchemaHash() string {
	return "c8e50621bd583586fcc482465f205ff707929a0b"
}

//
// Service types
//

type User struct {
	Id       uint64 `json:"id"`
	Username string `json:"username"`
}

type exampleService interface {
	Ping(ctx context.Context) error
	GetUser(ctx context.Context, id uint64) (*User, error)
}

type ExampleServiceServer interface {
	exampleService
	Download(ctx context.Context, file string, stream DownloadStreamWriter) error
}

type ExampleServiceClient interface {
	exampleService
	Download(ctx context.Context, file string) (DownloadStreamReader, error)
}

type DownloadStreamWriter interface {
	streamWriter
	Write(base64 string) error
}

type DownloadStreamReader interface {
	Read(autoRetry ...bool) (base64 string, eof bool, err error)
}

var WebRPCServices = map[string][]string{
	"Example": {
		"Ping",
		"GetUser",
		"Download",
	},
}

//
// Server
//

type exampleServiceServer struct {
	service ExampleServiceServer
}

func NewExampleServiceServer(svc ExampleServiceServer) http.Handler {
	return &exampleServiceServer{
		service: svc,
	}
}

func (s *exampleServiceServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "Example")

	if r.Method != "POST" {
		err := ErrorWithCause(RPCErrorBadRoute, fmt.Errorf("unsupported method %q (only POST is allowed)", r.Method))
		RespondWithError(w, err)
		return
	}

	if !strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {
		err := ErrorWithCause(RPCErrorBadRoute, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
		return
	}

	switch r.URL.Path {
	case "/rpc/Example/Ping":
		s.servePing(ctx, w, r)
		return
	case "/rpc/Example/GetUser":
		s.serveGetUser(ctx, w, r)
		return
	case "/rpc/Example/Download":
		s.serveDownload(ctx, w, r)
		return
	default:
		err := ErrorWithCause(RPCErrorBadRoute, fmt.Errorf("rpc method %q not found", r.URL.Path))
		RespondWithError(w, err)
		return
	}
}

func (s *exampleServiceServer) servePing(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Ping")

	// Call service method
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(RPCErrorPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		err = s.service.Ping(ctx)
	}()

	if err != nil {
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`{}`)) // TODO in template: send when there is no response
}

func (s *exampleServiceServer) serveGetUser(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetUser")
	reqContent := struct {
		Arg0 uint64 `json:"id"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(RPCErrorRequest, fmt.Errorf("failed to read request body")))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, ErrorWithCause(RPCErrorInvalidArguments, err))
		return
	}

	// Call service method
	var ret0 *User
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(RPCErrorPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.service.GetUser(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 *User `json:"user"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		RespondWithError(w, ErrorWithCause(RPCErrorRequest, fmt.Errorf("failed to marshal response data")))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *exampleServiceServer) serveDownload(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Download")
	reqContent := struct {
		Arg0 string `json:"file"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		RespondWithError(w, ErrorWithCause(RPCErrorRequest, fmt.Errorf("failed to read request body")))
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		RespondWithError(w, ErrorWithCause(RPCErrorInvalidArguments, err))
		return
	}

	// Call service method
	sw, err := newServerStreamWriter(w)
	if err != nil {
		RespondWithError(w, ErrorWithCause(RPCErrorRequest, fmt.Errorf("http connection does not support streams")))
		return
	}

	streamWriter := &downloadStreamWriter{sw}

	// connection monitoring and keep-alive
	go func() {
		for {
			select {
			case <-time.After(StreamKeepAliveInterval):
				err := streamWriter.Ping()
				if err != nil {
					return
				}
			case <-r.Context().Done():
				streamWriter.Close()
				return
			case <-streamWriter.Done():
				return
			}
		}
	}()

	func() {
		defer func() {
			// In case of a panic, serve a error chunk and then panic.
			if rr := recover(); rr != nil {
				streamWriter.Error(ErrorWithCause(RPCErrorPanic, fmt.Errorf("%v", rr)))
				streamWriter.Close()
				panic(rr)
			}
		}()
		err = s.service.Download(ctx, reqContent.Arg0, streamWriter)
	}()

	if err != nil {
		streamWriter.Error(err) // send the error to the client
	}
	streamWriter.Close() // always ensure we close the stream
}

type downloadStreamWriter struct {
	*serverStreamWriter
}

func (s *downloadStreamWriter) Write(base64 string) error {
	ret0 := base64

	type data struct {
		Ret0 string `json:"base64"`
	}

	body := struct {
		Data data `json:"data"`
	}{data{ret0}}

	payload, err := json.Marshal(body)
	if err != nil {
		err := ErrorWithCause(RPCErrorStreamLost, fmt.Errorf("failed to marshal json response: %w", err))
		s.Error(err)
		s.Close()
		return err
	}

	return s.write(payload)
}

//
// Server helpers
//

func RespondWithError(w http.ResponseWriter, err error) {
	rpcErr, ok := err.(RPCError)
	if !ok {
		rpcErr = Errorf(err.Error())
	}

	statusCode := rpcErr.HTTPStatus
	if statusCode == 0 {
		statusCode = 400 // default
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

//
// Server streaming helpers
//

const StreamKeepAliveInterval = 30 * time.Second

type streamWriter interface {
	write(payload []byte) error
	Error(err error) error
	Ping() error
	Close() error
	Done() <-chan struct{}
}

type serverStreamWriter struct {
	w             http.ResponseWriter
	flusher       http.Flusher
	headerWritten bool
	done          chan struct{}
	mu            sync.Mutex
}

func newServerStreamWriter(w http.ResponseWriter) (*serverStreamWriter, error) {
	flusher, ok := w.(http.Flusher)
	if !ok {
		return nil, errors.New("expected http.ResponseWriter to be an http.Flusher")
	}
	return &serverStreamWriter{w: w, flusher: flusher}, nil
}

func (s *serverStreamWriter) write(payload []byte) error {
	select {
	case <-s.Done():
		return RPCErrorStreamClosed
	default:
	}

	s.mu.Lock()
	defer s.mu.Unlock()

	w := s.w
	if !s.headerWritten {
		// content-type is very important here as proxy servers treat it differently
		w.Header().Set("Content-Type", "application/stream+json") // Use this!!
		// w.Header().Set("Content-Type", "application/json") // TODO: just for testing purposes..

		w.Header().Set("Transfer-Encoding", "chunked")
		w.Header().Set("Connection", "keep-alive")
		w.Header().Set("Cache-Control", "no-cache")
		s.headerWritten = true
	}

	fmt.Printf("SEND: %s\n", payload)

	s.w.Write([]byte(fmt.Sprintf("%x\r\n", len(payload))))
	s.w.Write(payload)
	s.w.Write([]byte("\r\n"))
	s.flusher.Flush()
	return nil
}

func (s *serverStreamWriter) Error(err error) error {
	rpcErr, ok := err.(RPCError)
	if !ok {
		rpcErr = Errorf(err.Error())
	}

	body := struct {
		Error RPCError `json:"error"`
	}{rpcErr}

	payload, err := json.Marshal(body)
	if err != nil {
		err := ErrorWithCause(RPCErrorStreamLost, fmt.Errorf("failed to marshal json response: %w", err))
		s.Close()
		return err
	}

	return s.write(payload)
}

func (s *serverStreamWriter) Ping() error {
	return s.write([]byte(`{"ping":true}`))
}

func (s *serverStreamWriter) Close() error {
	select {
	case <-s.Done():
		return nil
	default:
	}

	s.mu.Lock()
	fmt.Fprintf(s.w, "0\r\n")
	s.flusher.Flush()
	close(s.done)
	s.mu.Unlock()
	return nil
}

func (s *serverStreamWriter) Done() <-chan struct{} {
	s.mu.Lock()
	if s.done == nil {
		s.done = make(chan struct{})
	}
	d := s.done
	s.mu.Unlock()
	return d
}

//
// Client
//

const ExampleServicePathPrefix = "/rpc/Example/"

type exampleServiceClient struct {
	client HTTPClient
	urls   [4]string
}

func NewExampleServiceClient(addr string, client HTTPClient) ExampleServiceClient {
	prefix := urlBase(addr) + ExampleServicePathPrefix
	urls := [4]string{
		prefix + "Ping",
		prefix + "GetUser",
		prefix + "Download",
	}
	return &exampleServiceClient{
		client: client,
		urls:   urls,
	}
}

func (c *exampleServiceClient) Ping(ctx context.Context) error {
	_, err := doHTTPRequest(ctx, c.client, c.urls[0], nil, nil)
	return err
}

func (c *exampleServiceClient) GetUser(ctx context.Context, id uint64) (*User, error) {
	in := struct {
		Arg0 uint64 `json:"id"`
	}{id}
	out := struct {
		Ret0 *User `json:"user"`
	}{}

	_, err := doHTTPRequest(ctx, c.client, c.urls[1], in, &out)
	return out.Ret0, err
}

func (c *exampleServiceClient) Download(ctx context.Context, file string) (DownloadStreamReader, error) {
	in := struct {
		Arg0 string `json:"file"`
	}{file}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], in, nil)
	if err != nil {
		return nil, err
	}

	return newClientDownloadStreamReader(resp), nil
}

//
// Client helpers
//

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	if headers, ok := HTTPRequestHeaders(ctx); ok {
		for k := range headers {
			for _, v := range headers[k] {
				req.Header.Add(k, v)
			}
		}
	}
	return req, nil
}

func doHTTPRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) (*http.Response, error) {
	reqBody, err := json.Marshal(in)
	if err != nil {
		return nil, rpcClientError(err, "failed to marshal json request")
	}
	if err = ctx.Err(); err != nil {
		return nil, rpcClientError(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, bytes.NewBuffer(reqBody), "application/json")
	if err != nil {
		return nil, rpcClientError(err, "could not build request")
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, rpcClientError(err, "request failed")
	}

	// auto-close body for non-streaming outputs
	if out != nil {
		defer func() {
			cerr := resp.Body.Close()
			if err == nil && cerr != nil {
				err = rpcClientError(err, "failed to close response body")
			}
		}()
	}

	if err = ctx.Err(); err != nil {
		return resp, rpcClientError(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return resp, rpcErrorFromResponse(resp)
	}

	if out != nil {
		respBody, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return resp, rpcClientError(err, "failed to read response body")
		}

		err = json.Unmarshal(respBody, &out)
		if err != nil {
			return resp, rpcClientError(err, "failed to unmarshal json response body")
		}
		if err = ctx.Err(); err != nil {
			return resp, rpcClientError(err, "aborted because context was done")
		}
	}

	return resp, nil
}

func rpcErrorFromResponse(resp *http.Response) RPCError {
	respBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return rpcClientError(err, "failed to read server error response body")
	}

	var rpcErr RPCError
	if err := json.Unmarshal(respBody, &rpcErr); err != nil {
		return rpcClientError(err, "failed unmarshal error response")
	}
	if rpcErr.Cause != "" {
		rpcErr.cause = errors.New(rpcErr.Cause)
	}
	return rpcErr
}

func rpcClientError(cause error, message string) RPCError {
	return ErrorWithCause(Errorf(message), cause)
}

func WithHTTPRequestHeaders(ctx context.Context, h http.Header) (context.Context, error) {
	if _, ok := h["Accept"]; ok {
		return nil, errors.New("provided header cannot set Accept")
	}
	if _, ok := h["Content-Type"]; ok {
		return nil, errors.New("provided header cannot set Content-Type")
	}

	copied := make(http.Header, len(h))
	for k, vv := range h {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}

	return context.WithValue(ctx, HTTPClientRequestHeadersCtxKey, copied), nil
}

func HTTPRequestHeaders(ctx context.Context) (http.Header, bool) {
	h, ok := ctx.Value(HTTPClientRequestHeadersCtxKey).(http.Header)
	return h, ok
}

//
// Client streaming helpers
//

type clientDownloadStreamReader struct {
	// resp    *http.Response
	reader  io.Reader
	decoder *json.Decoder
}

func newClientDownloadStreamReader(resp *http.Response) *clientDownloadStreamReader {
	reader := httputil.NewChunkedReader(resp.Body)
	decoder := json.NewDecoder(reader)
	return &clientDownloadStreamReader{
		// resp: resp, reader: reader, decoder: decoder,
		reader: reader, decoder: decoder,
	}
}

func (c *clientDownloadStreamReader) Read(autoRetry ...bool) (base64 string, eof bool, err error) {
	for {
		out := struct {
			Data struct {
				Ret0 string `json:"base64"`
			} `json:"data"`
			Error *RPCError `json:"error,omitempty"`
			Ping  bool      `json:"ping"`
		}{}

		err = c.decoder.Decode(&out)

		// Skip ping payloads
		if err == nil && out.Ping {
			continue
		}

		// Error checking
		if err != nil {
			if err == io.EOF {
				return out.Data.Ret0, true, RPCErrorStreamClosed
			}
			return out.Data.Ret0, false, ErrorWithCause(RPCErrorStreamLost, err)
		}
		if out.Error != nil {
			return out.Data.Ret0, false, *out.Error
		}

		return out.Data.Ret0, false, nil
	}
}

//
// Helpers
//

type contextKey struct {
	name string
}

func (k *contextKey) String() string {
	return "webrpc context value " + k.name
}

var (
	// For Client
	HTTPClientRequestHeadersCtxKey = &contextKey{"HTTPClientRequestHeaders"}

	// For Server
	HTTPResponseWriterCtxKey = &contextKey{"HTTPResponseWriter"} // http.ResponseWriter
	HTTPRequestCtxKey        = &contextKey{"HTTPRequest"}        // *http.Request
	ServiceNameCtxKey        = &contextKey{"ServiceName"}        // string
	MethodNameCtxKey         = &contextKey{"MethodName"}         // string
)

//
// Errors
//

type RPCError struct {
	Name       string `json:"error"`
	Code       uint64 `json:"code"`
	Message    string `json:"message"`
	Cause      string `json:"cause,omitempty"`
	HTTPStatus int    `json:"-"`
	cause      error
}

var _ error = RPCError{}

func (e RPCError) Error() string {
	if e.Cause != "" {
		return fmt.Sprintf("%s %d - %s - %s", e.Name, e.Code, e.Message, e.Cause)
	} else {
		return fmt.Sprintf("%s %d - %s", e.Name, e.Code, e.Message)
	}
}

func (e RPCError) Is(target error) bool {
	if rpcErr, ok := target.(RPCError); ok {
		return rpcErr.Code == e.Code
	}
	return errors.Is(e.cause, target)
}

func (e RPCError) Unwrap() error {
	return e.cause
}

var (
	ErrInvalidName  = RPCError{Code: 500100, Name: "InvalidUsername", Message: "invalid username"}
	ErrMemoryFull   = RPCError{Code: 400100, Name: "MemoryFull", Message: "system memory is full"}
	ErrFileNotFound = RPCError{Code: 400200, Name: "FileNotFound", Message: "file not found"}
	ErrUnauthorized = RPCError{Code: 403000, Name: "Unauthorized", Message: "Unauthorized", HTTPStatus: 401}
	ErrUserNotFound = RPCError{Code: 403001, Name: "UserNotFound", Message: "user not found"}
)

// TODO: review.. these would be provided errors, etc.. part of webrpc..
var (
	RPCErrorPanic            = RPCError{Code: 1, Name: "RPCErrorPanic", Message: "panic", HTTPStatus: 500}
	RPCErrorBadRoute         = RPCError{Code: 2, Name: "RPCErrorBadRoute", Message: "bad route", HTTPStatus: 404}
	RPCErrorRequest          = RPCError{Code: 3, Name: "RPCErrorRequest", Message: "request failed", HTTPStatus: 400}
	RPCErrorInvalidArguments = RPCError{Code: 4, Name: "RPCErrorInvalidArguments", Message: "invalid rpc method arguments", HTTPStatus: 400}
	RPCErrorUnauthorized     = RPCError{Code: 5, Name: "RPCErrorUnauthorized", Message: "unauthorized", HTTPStatus: 401}

	// stream lost during transmission
	RPCErrorStreamLost = RPCError{Code: 6, Name: "RPCErrorStreamLost", Message: "stream lost", HTTPStatus: 400} // TODO: httpstatus?

	// stream closed normally
	RPCErrorStreamClosed = RPCError{Code: 7, Name: "RPCErrorStreamClosed", Message: "stream closed", HTTPStatus: 400} // TODO: httpstatus?

)

func Errorf(messagef string, args ...interface{}) RPCError {
	cause := fmt.Errorf(messagef, args...)
	return RPCError{Code: 0, Name: "RPCError", Message: cause.Error(), cause: cause}
}

func ErrorWithCause(rpcErr RPCError, cause error) RPCError {
	err := rpcErr
	err.cause = cause
	err.Cause = cause.Error()
	return err
}
