webrpc = v2

name = hello-webrpc
version = v0.0.1


import
  - ./example1-definitions.ridl

import example1-partials.ridl
  - Empty
  - GetUserRequest


alias Balance: string
  + go.field.type = BigInt
  + go.tag.db = balance

struct Role
  - name: string

  - users: map<uint64,User>

  - perms: []string # comment

  - other: map<uint64,map<string,string>> # comment


struct User
  - ID: uint64
    + json = id
    + go.tag.db = id

  - username: string
    + json = USERNAME
    + go.tag.db = username

  - amount: Balance

  - role: string
    + go.tag.db = -

  - createdAt?: timestamp
    + json = created_at
    + go.tag.json = created_at,omitempty
    + go.tag.db = created_at
    

struct Notice
  - msg: string



# syntax is: error <code> <name> <message> [-- <http status code>]
error 500100 InvalidUsername "invalid username"
error 403000 Unauthorized    "unauthorized access" -- 401


service Example

  # comment can go here
  # too .. :)
  - Ping() => (status: bool)

  - GetUser(req: GetUserRequest) => (user: User)

  - stream Recv(req: string)

  - stream Send() => (resp: string)

  - stream SendAndRecv(req: string) => stream (resp: string)

  - Broadcast(qty?: Balance) => stream (resp: Notice)

  -	VerifyUsers(seq: int32, header?: map<string,[]string>, ids: []uint64) => (code: bool, ids: []bool)
	
  - MoreTest(n: uint64, stuff: []map<uint64,string>, etc: string) => (code?: bool)



struct FlattenRequest
  - name: string
    + go.tag.db = name
  - amount?: Balance
    + go.tag.db = amount

struct FlattenResponse
  - id: uint64
    + go.field.name = ID
  - count: uint64
    + json = counter

service Another
  - Flatten(FlattenRequest) => (FlattenResponse)
  - GetAccountBalance(name: string) => (balance: Balance)
